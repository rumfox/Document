
196p : 성능지표 측정 및 결과 저장 : Batch Pipeline(단, 성능지표 측정 Script는 분석가가 작성)
217p : Ambari를 Cloudbreak로 설명하는 것으로 보임

SK만의 차별적 제안 요소
  - Model Management : 분석 모델의 개선 영역 발굴, 활용가치 평가, 재개발 여부 판단 지속 시행하기 위한 "분석 모델 모니터링 기술"
  - Model Store : Biz & Data 서비스 영역 확장성을 확보하기 위한 시스템 간 "분석 모델 서비스 기능"
  - Meta Management : Data 모형 변화에 따른 변경/이력 추적 및 영향도 분석을 포괄하는 "데이터 표준화 기능"

-----------------------------

1. 검토의견
  - 조직부문 : 분석 플랫폼, 디지털 엔진
  - 기술부문
  - 비용측면 : 투찰금액에 인프라 제외 되어 있음

2. 비교내용
  - 항목 LDCC SK C&C
  - 클라우드 / 보안 /

3. 특이사항
  - 베스핀글로벌

--------------
1. 보안 측면
        - 인프라 전체 WEB/WAS/API/RDB 가 Public 영역에 존재 하고 있습니다.
           외부 침해시 직접적인 노출이 되는 시스템 구조 이며 이를 막기 위해 AWS WAF 를
          적용 한것으로 보이나, AWS WAF 기본 룰셋의 탐지 수준은 외부 해킹에서 내부 자산
          을 보호 할 수 있는 수준이 아니며, 국내 레퍼런스도 부족한 상홥니다.
           인프라 보호 레벨에 따른 격리 조치가 되어 있지 않습니다.
         - 개인 정보 보호법에 따르면 개인을 식별 할 수 있는 정보의 경우 격리된 곳에 보관 하게 되어있으며, AWS 에서는 이를
          Private 영역에 위치 하여 외부로 부터 격리 하는 것을 권고 하고 있습니다.  하지만 RFP 상 아키텍쳐에 따르면
          데이터 베이스 모두가 Public 영역에 있어 ISMS-P 기준을 만족 시킬 수 없습니다.

         - 대안
                - RDB 는 무조건 Private 영역에 위치 합니다.
                 - 애플리케이션을 통해 시스템을 접속 하는 경우 (웹/모바일) Public 영역에는 웹 방화벽만 존재 하며
                  모든 WEB/WAS 영역 역시 Private 영역에 위치 합니다.

2. 운영 안정성 측면
        - 모든 시스템 구조가 AWS 물리 머신에 직접 설치 하여 운영 하는 구조 입니다.
           이러한 환경에서 시스템을 안정적으로 운영 하기 위해서는 시스템 접근제어, HW 관제 시스템
          관련 인력, 모두 과다로 발생 하는 시스템 구조 입니다.
         - 개발/테스트/운영 모두 단일 VPC 에 위치 하고 있습니다. 운영 환경은 개발,테스트 환경과 격리 되어 운영을 해야만
          안정적인 운영이 가능 하나 전체가 하나로 묶여 있는 구조로 인해 운영 안정성에 치명적인 문제를 발생 시킬 수 있습니다.

         - 대안
                - WEB/WAS 영역은 컨테이너 기반으로 서비스를 제공 하게 하여 운영 서버의 갯수를 최소화 힙니다.
                 - 모든 시스템을 물리 머신에 설치 하는 방식이 아닌 EMR(hadoop)과 같은 AWS 관리형 서비스 사용을 통해
                  HW 의 관제 비용/인력 모두를 최적화 해야 합니다.
                - 개발, 테스트, 운영 VPC 를 개별로 구성 하여 격리된 환경으로 개발/운영 할 수 있게 해야 합니다.

3. 비용 측면
        - 기존과 같은 서버와 응용 프로그램간에 1:1 방식의 시스템 운영은 트래픽 증가에 따라 서버가 확장이 되고
          그에 따른 비용이 증가 하는 구조 입니다.

     - 대안
         - 컨테이너 기반 설계/운영을 통해 서버 갯수를 최적화 해야 합니다.

----------------
텐서플로우 설치
----------------
-bash: docker: command not found
shell> pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.0.1-cp27-none-linux_x86_64.whl

https://lux.cuenet.kr/100

----------------
머신러닝 특이점
----------------

머신러닝과 전통적 통계학의 간략한 특징 비교

머신러닝(Machine Learning)은 예측(Prediction)에 집중.
머신러닝 측정 : 예측의 퍼포먼스(performance of prediction) 통해 측정.
               모형 복잡성(model complexity)보다 Overfitting(여러 인자를 사용하는 통계 모형을 사용하는 것) 고려

전통적 통계학 모형 : 복잡성보다 단순성 추구.
               인자(parameter) 해석가능성, 모델링 과 샘플링의 가정(assumption)에 강조를 한다. 머신러닝과 전통적 통계학은 차이점도 있지만 많은 공통점 또한 공유하고 있다.

넷플릭스 사례를 통해 머신러닝과 전통적 통계학 비교
넷플릭스는 유저의 영화 평가를 다량으로 수집하여 영화를 예측하여 추천해준다. 결과 데이터, 영화 감상 내역 등 예측에 필요한 데이터를 이미 가지고 있는 상태에서 넷플릭스의 영화 추천 시스템이 작동하는 것이다. 이에 대한 성공은 믿을만한 영화를 추천해주는지로 평가할 수 있다. 반면 전통적 통계학을 통해서는 유저가 왜 특정 영화를 선택하게 되는지를 이해할 수 있게하는 모형을 만들려고 할 것이다. 그 이해라는 것은 예를 들면, A 종류의 영화를 좋아하는 사람은 또 B 종류의 영화를 좋아하하는구나라는 심리학적인 설명을 할 수도 있는 것이다. 반면 머신러닝은 이러한 이유의 해석가능성(interpretability)이 부족하다.

머신러닝과 전통적 통계학은 그 목적부터가 다르며, 사용법, 평가법, 그리고재료.. 혹은 준비물(?) 역시 다르다. 하지만 둘은 상호보완적으로 사용될 수 있을 것이다.
